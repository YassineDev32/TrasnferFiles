// UpdateAPIServiceCommand.java
import lombok.Builder;
import lombok.Data;

import java.util.List;
import java.util.Optional;

@Data
@Builder
public class UpdateAPIServiceCommand {
    private String id;

    private Optional<String> name;
    private Optional<String> trigramme;
    private Optional<String> description;
    private Optional<Boolean> bridgeCommunication;
    private Optional<String> criticality;
    private Optional<String> p0Coevey;
    private Optional<String> techlead;
    private Optional<Boolean> java17Migrated;
    private Optional<Boolean> sonarized;
    private Optional<String> sonarReportUrl;
    private Optional<String> version;
    private Optional<Boolean> jfrogMigrated;
    private Optional<String> githubUrl;
    private Optional<String> developmentStatus;
    private Optional<String> springVersion;
    private Optional<Integer> servicesCountByTrigramme;
    private Optional<String> bridgeName;
    private Optional<String> documentedBy;
    private Optional<Boolean> isDocumented;
    private Optional<Boolean> publishedOnSkies;
    private Optional<Boolean> deployedOnDev;
    private Optional<Boolean> migrationTestedOnDev;

    private Optional<DataSourcesDTO> dataSources;

    private Optional<List<String>> clientConsumers;
    private Optional<List<String>> consumes;
    private Optional<List<String>> consumedBy;
    private Optional<List<EndpointDTO>> endpoints;

    @Data
    public static class DataSourcesDTO {
        private Boolean rabbitMQ;
        private Boolean commonDB;
        private Boolean dedicatedDB;
        private Boolean s3;
    }

    @Data
    public static class EndpointDTO {
        private String method;
        private String path;
        private String curl;
        private String expectedResponse;
        private String description;
    }
}

// UpdateAPIServiceUseCase.java
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class UpdateAPIServiceUseCase {

    private final APIServiceRepository apiServiceRepository;

    public UpdateApiServiceResponse handle(UpdateAPIServiceCommand cmd) {
        APIService service = apiServiceRepository.findById(cmd.getId())
                .orElseThrow(() -> new RuntimeException("APIService not found"));

        cmd.getName().ifPresent(service::setName);
        cmd.getTrigramme().ifPresent(service::setTrigramme);
        cmd.getDescription().ifPresent(service::setDescription);
        cmd.getBridgeCommunication().ifPresent(service::setBridgeCommunication);
        cmd.getCriticality().ifPresent(service::setCriticality);
        cmd.getP0Coevey().ifPresent(service::setPoCodev);
        cmd.getTechlead().ifPresent(service::setTechlead);
        cmd.getJava17Migrated().ifPresent(service::setJava17Migrated);
        cmd.getSonarized().ifPresent(service::setSonarized);
        cmd.getSonarReportUrl().ifPresent(service::setSonarReportUrl);
        cmd.getVersion().ifPresent(service::setVersion);
        cmd.getJfrogMigrated().ifPresent(service::setJfrogMigrated);
        cmd.getGithubUrl().ifPresent(service::setGithubUrl);
        cmd.getDevelopmentStatus().ifPresent(service::setDevelopmentStatus);
        cmd.getSpringVersion().ifPresent(service::setSpringVersion);
        cmd.getServicesCountByTrigramme().ifPresent(service::setServicesCountByTrigramme);
        cmd.getBridgeName().ifPresent(service::setBridgeName);
        cmd.getDocumentedBy().ifPresent(service::setDocumentedBy);
        cmd.getIsDocumented().ifPresent(service::setDocumented);
        cmd.getPublishedOnSkies().ifPresent(service::setPublishedOnSkies);
        cmd.getDeployedOnDev().ifPresent(service::setDeployedOnDev);
        cmd.getMigrationTestedOnDev().ifPresent(service::setMigrationTestedOnDev);

        cmd.getDataSources().ifPresent(dto -> {
            DataSources ds = new DataSources();
            ds.setRabbitMQ(dto.getRabbitMQ());
            ds.setCommonDB(dto.getCommonDB());
            ds.setDedicatedDB(dto.getDedicatedDB());
            ds.setS3(dto.getS3());
            service.setDatasources(ds);
        });

        cmd.getClientConsumers().ifPresent(consumerNames -> {
            List<ClientConsumer> clientConsumers = consumerNames.stream()
                .map(name -> {
                    ClientConsumer cc = new ClientConsumer();
                    cc.setName(name);
                    cc.setService(service); // Important : lien bidirectionnel
                    return cc;
                })
                .collect(Collectors.toList());
        
            service.setClientConsumers(clientConsumers);
        });
        cmd.getConsumes().ifPresent(consumers -> {
            List<Consumer> consumeList = consumers.stream()
                .map(name -> {
                    Consumer c = new Consumer();
                    c.setName(name);
                    c.setService(service);
                    return c;
                })
                .collect(Collectors.toList());
        
            service.setConsumes(consumeList);
        });

        cmd.getConsumedBy().ifPresent(producerNames -> {
            List<ConsumedBy> consumedByList = producerNames.stream()
                .map(name -> {
                    ConsumedBy cb = new ConsumedBy();
                    cb.setName(name);
                    cb.setService(service);
                    return cb;
                })
                .collect(Collectors.toList());
        
            service.setConsumedBy(consumedByList);
        });

        cmd.getEndpoints().ifPresent(endpointDTOs -> {
            List<Endpoint> endpoints = endpointDTOs.stream()
                .map(dto -> {
                    Endpoint ep = new Endpoint();
                    ep.setMethod(dto.getMethod());
                    ep.setPath(dto.getPath());
                    ep.setCurl(dto.getCurl());
                    ep.setExpectedResponse(dto.getExpectedResponse());
                    ep.setDescription(dto.getDescription());
                    ep.setService(service); // lien vers le service parent
                    return ep;
                })
                .collect(Collectors.toList());
        
            service.setEndpoints(endpoints);
        });


        return mapToResponse(apiServiceRepository.save(service));
    }

    private UpdateApiServiceResponse mapToResponse(APIService service) {
        return UpdateApiServiceResponse.builder()
                .id(service.getId())
                .name(service.getName())
                .message("Service mis à jour avec succès")
                .build();
    }
}

// UpdateApiServiceResponse.java
import lombok.Builder;
import lombok.Data;

@Data
@Builder
public class UpdateApiServiceResponse {
    private String id;
    private String name;
    private String message;
}
