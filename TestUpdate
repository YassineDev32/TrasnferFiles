// UpdateAPIServiceCommand.java
import lombok.Builder;
import lombok.Data;

import java.util.List;
import java.util.Optional;

@Data
@Builder
public class UpdateAPIServiceCommand {
    private String id;

    private Optional<String> name;
    private Optional<String> trigramme;
    private Optional<String> description;
    private Optional<Boolean> bridgeCommunication;
    private Optional<String> criticality;
    private Optional<String> p0Coevey;
    private Optional<String> techlead;
    private Optional<Boolean> java17Migrated;
    private Optional<Boolean> sonarized;
    private Optional<String> sonarReportUrl;
    private Optional<String> version;
    private Optional<Boolean> jfrogMigrated;
    private Optional<String> githubUrl;
    private Optional<String> developmentStatus;
    private Optional<String> springVersion;
    private Optional<Integer> servicesCountByTrigramme;
    private Optional<String> bridgeName;
    private Optional<String> documentedBy;
    private Optional<Boolean> isDocumented;
    private Optional<Boolean> publishedOnSkies;
    private Optional<Boolean> deployedOnDev;
    private Optional<Boolean> migrationTestedOnDev;

    private Optional<DataSourcesDTO> dataSources;

    private Optional<List<String>> clientConsumers;
    private Optional<List<String>> consumes;
    private Optional<List<String>> consumedBy;
    private Optional<List<EndpointDTO>> endpoints;

    @Data
    public static class DataSourcesDTO {
        private Boolean rabbitMQ;
        private Boolean commonDB;
        private Boolean dedicatedDB;
        private Boolean s3;
    }

    @Data
    public static class EndpointDTO {
        private String method;
        private String path;
        private String curl;
        private String expectedResponse;
        private String description;
    }
}

// UpdateAPIServiceUseCase.java
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class UpdateAPIServiceUseCase {

    private final APIServiceRepository apiServiceRepository;

    public UpdateApiServiceResponse handle(UpdateAPIServiceCommand cmd) {
        APIService service = apiServiceRepository.findById(cmd.getId())
                .orElseThrow(() -> new RuntimeException("APIService not found"));

        if (cmd.getName() != null) service.setName(cmd.getName());
        if (cmd.getTrigramme() != null) service.setTrigramme(cmd.getTrigramme());
        if (cmd.getDescription() != null) service.setDescription(cmd.getDescription());
        service.setBridgeCommunication(cmd.isBridgeCommunication());
        if (cmd.getCriticality() != null) service.setCriticality(cmd.getCriticality());
        if (cmd.getP0Coevey() != null) service.setP0Coevey(cmd.getP0Coevey());
        if (cmd.getTechlead() != null) service.setTechlead(cmd.getTechlead());
        service.setJava17Migrated(cmd.isJava17Migrated());
        service.setSonarized(cmd.isSonarized());
        if (cmd.getSonarReportUrl() != null) service.setSonarReportUrl(cmd.getSonarReportUrl());
        if (cmd.getVersion() != null) service.setVersion(cmd.getVersion());
        service.setJfrogMigrated(cmd.isJfrogMigrated());
        if (cmd.getGithubUrl() != null) service.setGithubUrl(cmd.getGithubUrl());
        if (cmd.getDevelopmentStatus() != null) service.setDevelopmentStatus(cmd.getDevelopmentStatus());
        if (cmd.getSpringVersion() != null) service.setSpringVersion(cmd.getSpringVersion());
        if (cmd.getServicesCountByTrigramme() != null) service.setServicesCountByTrigramme(cmd.getServicesCountByTrigramme());
        if (cmd.getBridgeName() != null) service.setBridgeName(cmd.getBridgeName());
        if (cmd.getDocumentedBy() != null) service.setDocumentedBy(cmd.getDocumentedBy());
        service.setDocumented(cmd.isDocumented());
        service.setPublishedOnSkies(cmd.isPublishedOnSkies());
        service.setDeployedOnDev(cmd.isDeployedOnDev());
        service.setMigrationTestedOnDev(cmd.isMigrationTestedOnDev());
    
        // DataSources
        if (cmd.getDataSources() != null) {
            DataSourcesDTO dto = cmd.getDataSources();
            DataSources ds = Optional.ofNullable(service.getDatasources()).orElse(new DataSources());
            if (dto.getRabbitMQ() != null) ds.setRabbitMQ(dto.getRabbitMQ());
            if (dto.getCommonDB() != null) ds.setCommonDB(dto.getCommonDB());
            if (dto.getDedicatedDB() != null) ds.setDedicatedDB(dto.getDedicatedDB());
            if (dto.getS3() != null) ds.setS3(dto.getS3());
            service.setDatasources(ds);
        }
    
        // Listes : reset complet
        if (cmd.getClientConsumers() != null) {
            service.getClientConsumers().clear();
            service.getClientConsumers().addAll(
                cmd.getClientConsumers().stream()
                    .map(name -> new ClientConsumer(name, service))
                    .collect(Collectors.toList())
            );
        }
    
        if (cmd.getConsumes() != null) {
            service.getConsumes().clear();
            service.getConsumes().addAll(
                cmd.getConsumes().stream()
                    .map(name -> new Consumer(name, service))
                    .collect(Collectors.toList())
            );
        }
    
        if (cmd.getConsumedBy() != null) {
            service.getConsumedBy().clear();
            service.getConsumedBy().addAll(
                cmd.getConsumedBy().stream()
                    .map(name -> new ConsumedBy(name, service))
                    .collect(Collectors.toList())
            );
        }
    
        if (cmd.getEndpoints() != null) {
            service.getEndpoints().clear();
            service.getEndpoints().addAll(
                cmd.getEndpoints().stream()
                    .map(dto -> {
                        Endpoint endpoint = new Endpoint();
                        endpoint.setService(service);
                        endpoint.setMethod(dto.getMethod());
                        endpoint.setPath(dto.getPath());
                        endpoint.setCurl(dto.getCurl());
                        endpoint.setExpectedResponse(dto.getExpectedResponse());
                        endpoint.setDescription(dto.getDescription());
                        return endpoint;
                    })
                    .collect(Collectors.toList())
            );
        }
            return mapToResponse(apiServiceRepository.save(service));
        }

    private UpdateApiServiceResponse mapToResponse(APIService service) {
        return UpdateApiServiceResponse.builder()
                .id(service.getId())
                .name(service.getName())
                .message("Service mis à jour avec succès")
                .build();
    }
}

// UpdateApiServiceResponse.java
import lombok.Builder;
import lombok.Data;

@Data
@Builder
public class UpdateApiServiceResponse {
    private String id;
    private String name;
    private String message;
}
