@Service
@RequiredArgsConstructor
public class UpdateApiServiceUseCaseImpl implements UpdateApiServiceUseCase {

    private final APIServiceRepository apiServiceRepository;
    private final TechnologyRepository technologyRepository;
    private final ObjectMapper objectMapper;

    @Override
    @Transactional
    public ApiServiceDetailResponse handle(UpdateApiServiceRequest request) {
        APIService service = apiServiceRepository.findById(request.getServiceId())
            .orElseThrow(() -> new EntityNotFoundException("APIService not found"));

        updateServiceFields(service, request);
        
        if (request.getTechnologies() != null) {
            updateTechnologies(service, request.getTechnologies());
        }

        APIService updatedService = apiServiceRepository.save(service);
        return mapToResponse(updatedService);
    }

    private void updateServiceFields(APIService service, UpdateApiServiceRequest request) {
        try {
            // Update simple fields
            if (request.getName() != null) service.setName(request.getName());
            if (request.getTrigramme() != null) service.setTrigramme(request.getTrigramme());
            if (request.getDescription() != null) service.setDescription(request.getDescription());
            if (request.getBridgeCommunication() != null) service.setBridgeCommunication(request.getBridgeCommunication());
            if (request.getCriticality() != null) service.setCriticality(request.getCriticality());
            if (request.getPoCodev() != null) service.setPoCodev(request.getPoCodev());
            if (request.getTechlead() != null) service.setTechlead(request.getTechlead());
            if (request.getDocumented() != null) service.setDocumented(request.getDocumented());
            if (request.getPublishedOnSkies() != null) service.setPublishedOnSkies(request.getPublishedOnSkies());
            if (request.getDeployedOnDev() != null) service.setDeployedOnDev(request.getDeployedOnDev());
            if (request.getMigrationTestedOnDev() != null) service.setMigrationTestedOnDev(request.getMigrationTestedOnDev());
            
            // Update nested dataSources
            if (request.getDataSources() != null) {
                if (service.getDataSources() == null) {
                    service.setDataSources(new DataSources());
                }
                if (request.getDataSources().getRabbitMQ() != null) {
                    service.getDataSources().setRabbitMQ(request.getDataSources().getRabbitMQ());
                }
                if (request.getDataSources().getCommonDB() != null) {
                    service.getDataSources().setCommonDB(request.getDataSources().getCommonDB());
                }
                if (request.getDataSources().getDedicatedDB() != null) {
                    service.getDataSources().setDedicatedDB(request.getDataSources().getDedicatedDB());
                }
                if (request.getDataSources().getS3() != null) {
                    service.getDataSources().setS3(request.getDataSources().getS3());
                }
            }
            
            // Update lists
            if (request.getClientConsumers() != null) {
                service.setClientConsumers(new ArrayList<>(request.getClientConsumers()));
            }
            if (request.getConsumes() != null) {
                service.setConsumes(new ArrayList<>(request.getConsumes()));
            }
            if (request.getConsumedBy() != null) {
                service.setConsumedBy(new ArrayList<>(request.getConsumedBy()));
            }
            
        } catch (Exception e) {
            throw new TechnicalException("Field update failed", e);
        }
    }

    private void updateTechnologies(APIService service, List<TechnologyUpdateDTO> techUpdates) {
        techUpdates.forEach(tech -> {
            switch (tech.getOperation()) {
                case ADD -> addTechnology(service, tech);
                case UPDATE -> updateTechnology(service, tech);
                case REMOVE -> removeTechnology(service, tech.getName());
                default -> throw new IllegalArgumentException("Unsupported operation: " + tech.getOperation());
            }
        });
    }

    private void addTechnology(APIService service, TechnologyUpdateDTO tech) {
        if (technologyRepository.existsByApiServiceIdAndTechnologyName(service.getId(), tech.getName())) {
            throw new ConflictException("Technology " + tech.getName() + " already exists");
        }

        ServiceTechnologies newTech = new ServiceTechnologies();
        newTech.setApiServiceId(service.getId());
        newTech.setTechnologyName(tech.getName().toUpperCase());
        newTech.setTechnologyVersion(tech.getVersion());
        technologyRepository.save(newTech);
    }

    private void updateTechnology(APIService service, TechnologyUpdateDTO tech) {
        technologyRepository.findByApiServiceIdAndTechnologyName(service.getId(), tech.getName())
            .ifPresentOrElse(
                existingTech -> {
                    existingTech.setTechnologyVersion(tech.getVersion());
                    technologyRepository.save(existingTech);
                },
                () -> {
                    throw new EntityNotFoundException("Technology " + tech.getName() + " not found");
                }
            );
    }

    private void removeTechnology(APIService service, String techName) {
        if (!technologyRepository.existsByApiServiceIdAndTechnologyName(service.getId(), techName)) {
            throw new EntityNotFoundException("Technology " + techName + " not found");
        }
        technologyRepository.deleteByApiServiceIdAndTechnologyName(service.getId(), techName);
    }

    private ApiServiceDetailResponse mapToResponse(APIService service) {
        ApiServiceDetailResponse response = new ApiServiceDetailResponse();
        
        // Map simple fields
        response.setId(service.getId());
        response.setName(service.getName());
        response.setTrigramme(service.getTrigramme());
        response.setDescription(service.getDescription());
        response.setBridgeCommunication(service.isBridgeCommunication());
        response.setCriticality(service.getCriticality());
        response.setPoCodev(service.getPoCodev());
        response.setTechlead(service.getTechlead());
        response.setJava17Migrated(service.isJava17Migrated());
        response.setSonarized(service.isSonarized());
        response.setSonarReportUrl(service.getSonarReportUrl());
        response.setJfrogMigrated(service.isJfrogMigrated());
        response.setGithubUrl(service.getGithubUrl());
        response.setDevelopmentStatus(service.getDevelopmentStatus());
        response.setSpringVersion(service.getSpringVersion());
        response.setBridgeName(service.getBridgeName());
        response.setDocumentedBy(service.getDocumentedBy());
        response.setDocumented(service.isDocumented());
        response.setPublishedOnSkies(service.isPublishedOnSkies());
        response.setDeployedOnDev(service.isDeployedOnDev());
        response.setMigrationTestedOnDev(service.isMigrationTestedOnDev());
        
        // Map DataSources
        if (service.getDataSources() != null) {
            ApiServiceDetailResponse.DataSourcesDTO dataSourcesDTO = new ApiServiceDetailResponse.DataSourcesDTO();
            dataSourcesDTO.setRabbitMQ(service.getDataSources().isRabbitMQ());
            dataSourcesDTO.setCommonDB(service.getDataSources().isCommonDB());
            dataSourcesDTO.setDedicatedDB(service.getDataSources().isDedicatedDB());
            dataSourcesDTO.setS3(service.getDataSources().isS3());
            response.setDataSources(dataSourcesDTO);
        }
        
        // Map lists
        if (service.getClientConsumers() != null) {
            response.setClientConsumers(new ArrayList<>(service.getClientConsumers()));
        }
        if (service.getConsumes() != null) {
            response.setConsumes(new ArrayList<>(service.getConsumes()));
        }
        if (service.getConsumedBy() != null) {
            response.setConsumedBy(new ArrayList<>(service.getConsumedBy()));
        }
        
        // Map technologies
        List<ServiceTechnologies> technologies = technologyRepository.findByApiServiceId(service.getId());
        response.setTechnologies(technologies.stream()
            .map(t -> new ApiServiceDetailResponse.TechnologyDTO(
                t.getTechnologyName(),
                t.getTechnologyVersion(),
                t.getCreatedAt()))
            .toList());
        
        return response;
    }
}
