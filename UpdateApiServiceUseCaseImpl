@Service
@RequiredArgsConstructor
public class UpdateApiServiceUseCaseImpl implements UpdateApiServiceUseCase {

    private final APIServiceRepository apiServiceRepository;
    private final DataSourcesRepository dataSourcesRepository;
    private final EndpointRepository endpointRepository;

    @Override
    @Transactional
    public ApiServiceResponse handle(UpdateApiServiceRequest request) {
        APIService service = apiServiceRepository.findById(request.getServiceId())
            .orElseThrow(() -> new EntityNotFoundException("APIService with id " + request.getServiceId() + " not found"));

        updateServiceFields(service, request);
        updateDataSources(service, request.getDataSources());
        updateEndpoints(service, request.getEndpoints());

        APIService updatedService = apiServiceRepository.save(service);
        return mapToResponse(updatedService);
    }

    private void updateServiceFields(APIService service, UpdateApiServiceRequest request) {
        if (request.getName() != null) service.setName(request.getName());
        if (request.getTrigramme() != null) service.setTrigramme(request.getTrigramme());
        if (request.getDescription() != null) service.setDescription(request.getDescription());
        if (request.getBridgeCommunication() != null) service.setBridgeCommunication(request.getBridgeCommunication());
        if (request.getCriticality() != null) service.setCriticality(request.getCriticality());
        if (request.getPoCodev() != null) service.setPoCodev(request.getPoCodev());
        if (request.getTechlead() != null) service.setTechlead(request.getTechlead());
        if (request.getJava17Migrated() != null) service.setJava17Migrated(request.getJava17Migrated());
        if (request.getSonarized() != null) service.setSonarized(request.getSonarized());
        if (request.getSonarReportUrl() != null) service.setSonarReportUrl(request.getSonarReportUrl());
        if (request.getJfrogMigrated() != null) service.setJfrogMigrated(request.getJfrogMigrated());
        if (request.getGithubUrl() != null) service.setGithubUrl(request.getGithubUrl());
        if (request.getDevelopmentStatus() != null) service.setDevelopmentStatus(request.getDevelopmentStatus());
        if (request.getSpringVersion() != null) service.setSpringVersion(request.getSpringVersion());
        if (request.getBridgeName() != null) service.setBridgeName(request.getBridgeName());
        if (request.getDocumentedBy() != null) service.setDocumentedBy(request.getDocumentedBy());
        if (request.getDocumented() != null) service.setDocumented(request.getDocumented());
        if (request.getPublishedOnSkies() != null) service.setPublishedOnSkies(request.getPublishedOnSkies());
        if (request.getDeployedOnDev() != null) service.setDeployedOnDev(request.getDeployedOnDev());
        if (request.getMigrationTestedOnDev() != null) service.setMigrationTestedOnDev(request.getMigrationTestedOnDev());
        if (request.getDatabaseSchema() != null) service.setDatabaseSchema(request.getDatabaseSchema());
        
        // Update lists
        if (request.getClientConsumers() != null) service.setClientConsumers(request.getClientConsumers());
        if (request.getConsumes() != null) service.setConsumes(request.getConsumes());
        if (request.getConsumedBy() != null) service.setConsumedBy(request.getConsumedBy());
    }

    private void updateDataSources(APIService service, UpdateApiServiceRequest.DataSourcesDTO dataSources) {
        if (dataSources != null) {
            DataSources existingDataSources = service.getDataSources() != null 
                ? service.getDataSources() 
                : new DataSources();
            
            if (dataSources.getRabbitMQ() != null) existingDataSources.setRabbitMQ(dataSources.getRabbitMQ());
            if (dataSources.getCommonDB() != null) existingDataSources.setCommonDB(dataSources.getCommonDB());
            if (dataSources.getDedicatedDB() != null) existingDataSources.setDedicatedDB(dataSources.getDedicatedDB());
            if (dataSources.getS3() != null) existingDataSources.setS3(dataSources.getS3());
            
            dataSourcesRepository.save(existingDataSources);
            service.setDataSources(existingDataSources);
        }
    }

    private void updateEndpoints(APIService service, List<UpdateApiServiceRequest.EndpointDTO> endpoints) {
        if (endpoints != null) {
            // Remove existing endpoints
            endpointRepository.deleteByApiService(service);
            
            // Add new endpoints
            List<Endpoint> newEndpoints = endpoints.stream()
                .map(dto -> Endpoint.builder()
                    .apiService(service)
                    .method(dto.getMethod())
                    .path(dto.getPath())
                    .curl(dto.getCurl())
                    .expectedResponse(dto.getExpectedResponse())
                    .description(dto.getDescription())
                    .build())
                .toList();
            
            endpointRepository.saveAll(newEndpoints);
            service.setEndpoints(newEndpoints);
        }
    }

    private ApiServiceResponse mapToResponse(APIService service) {
        return ApiServiceResponse.builder()
            .id(service.getId())
            .name(service.getName())
            .trigramme(service.getTrigramme())
            .description(service.getDescription())
            .bridgeCommunication(service.isBridgeCommunication())
            .criticality(service.getCriticality())
            .poCodev(service.getPoCodev())
            .techlead(service.getTechlead())
            .java17Migrated(service.isJava17Migrated())
            .sonarized(service.isSonarized())
            .sonarReportUrl(service.getSonarReportUrl())
            .jfrogMigrated(service.isJfrogMigrated())
            .githubUrl(service.getGithubUrl())
            .developmentStatus(service.getDevelopmentStatus())
            .springVersion(service.getSpringVersion())
            .bridgeName(service.getBridgeName())
            .documentedBy(service.getDocumentedBy())
            .documented(service.isDocumented())
            .publishedOnSkies(service.isPublishedOnSkies())
            .deployedOnDev(service.isDeployedOnDev())
            .migrationTestedOnDev(service.isMigrationTestedOnDev())
            .dataSources(mapDataSources(service.getDataSources()))
            .clientConsumers(service.getClientConsumers())
            .consumes(service.getConsumes())
            .consumedBy(service.getConsumedBy())
            .endpoints(mapEndpoints(service.getEndpoints()))
            .databaseSchema(service.getDatabaseSchema())
            .build();
    }

    private ApiServiceResponse.DataSourcesDTO mapDataSources(DataSources dataSources) {
        if (dataSources == null) {
            return ApiServiceResponse.DataSourcesDTO.builder()
                .rabbitMQ(false)
                .commonDB(false)
                .dedicatedDB(false)
                .s3(false)
                .build();
        }
        
        return ApiServiceResponse.DataSourcesDTO.builder()
            .rabbitMQ(dataSources.isRabbitMQ())
            .commonDB(dataSources.isCommonDB())
            .dedicatedDB(dataSources.isDedicatedDB())
            .s3(dataSources.isS3())
            .build();
    }

    private List<ApiServiceResponse.EndpointDTO> mapEndpoints(List<Endpoint> endpoints) {
        if (endpoints == null) return Collections.emptyList();
        
        return endpoints.stream()
            .map(e -> ApiServiceResponse.EndpointDTO.builder()
                .method(e.getMethod())
                .path(e.getPath())
                .curl(e.getCurl())
                .expectedResponse(e.getExpectedResponse())
                .description(e.getDescription())
                .build())
            .toList();
    }
}
