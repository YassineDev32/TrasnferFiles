@Service
@RequiredArgsConstructor
public class UpdateApiServiceUseCaseImpl implements UpdateApiServiceUseCase {

    private final APIServiceRepository apiServiceRepository;

    @Override
    @Transactional
    public APIService handle(UpdateApiServiceCommand command) {
        APIService service = apiServiceRepository.findById(command.getServiceId())
            .orElseThrow(() -> new EntityNotFoundException("APIService not found with id: " + command.getServiceId()));

        updateServiceFields(service, command);
        updateDataSources(service, command.getDataSources());
        updateEndpoints(service, command.getEndpoints());

        return apiServiceRepository.save(service);
    }

    private void updateServiceFields(APIService service, UpdateApiServiceCommand command) {
        if (command.getName() != null) service.setName(command.getName());
        if (command.getTrigramme() != null) service.setTrigramme(command.getTrigramme());
        if (command.getDescription() != null) service.setDescription(command.getDescription());
        if (command.getBridgeCommunication() != null) service.setBridgeCommunication(command.getBridgeCommunication());
        if (command.getCriticality() != null) service.setCriticality(command.getCriticality());
        if (command.getPoCodev() != null) service.setPoCodev(command.getPoCodev());
        if (command.getTechlead() != null) service.setTechlead(command.getTechlead());
        if (command.getJava17Migrated() != null) service.setJava17Migrated(command.getJava17Migrated());
        if (command.getSonarized() != null) service.setSonarized(command.getSonarized());
        if (command.getSonarReportUrl() != null) service.setSonarReportUrl(command.getSonarReportUrl());
        if (command.getJfrogMigrated() != null) service.setJfrogMigrated(command.getJfrogMigrated());
        if (command.getGithubUrl() != null) service.setGithubUrl(command.getGithubUrl());
        if (command.getDevelopmentStatus() != null) service.setDevelopmentStatus(command.getDevelopmentStatus());
        if (command.getSpringVersion() != null) service.setSpringVersion(command.getSpringVersion());
        if (command.getBridgeName() != null) service.setBridgeName(command.getBridgeName());
        if (command.getDocumentedBy() != null) service.setDocumentedBy(command.getDocumentedBy());
        if (command.getDocumented() != null) service.setDocumented(command.getDocumented());
        if (command.getPublishedOnSkies() != null) service.setPublishedOnSkies(command.getPublishedOnSkies());
        if (command.getDeployedOnDev() != null) service.setDeployedOnDev(command.getDeployedOnDev());
        if (command.getMigrationTestedOnDev() != null) service.setMigrationTestedOnDev(command.getMigrationTestedOnDev());
        if (command.getDatabaseSchema() != null) service.setDatabaseSchema(command.getDatabaseSchema());
        
        // Update lists
        if (command.getClientConsumers() != null) {
            updateClientConsumers(service, command.getClientConsumers());
        }
        if (command.getConsumes() != null) {
            updateConsumes(service, command.getConsumes());
        }
        if (command.getConsumedBy() != null) {
            updateConsumedBy(service, command.getConsumedBy());
        }
    }

    private void updateDataSources(APIService service, Map<String, Boolean> dataSources) {
        if (dataSources != null) {
            DataSources existingDataSources = service.getDatasources() != null 
                ? service.getDatasources() 
                : new DataSources();
            
            if (dataSources.containsKey("rabbitMQ")) existingDataSources.setRabbitMQ(dataSources.get("rabbitMQ"));
            if (dataSources.containsKey("commonDB")) existingDataSources.setCommonDB(dataSources.get("commonDB"));
            if (dataSources.containsKey("dedicatedDB")) existingDataSources.setDedicatedDB(dataSources.get("dedicatedDB"));
            if (dataSources.containsKey("s3")) existingDataSources.setS3(dataSources.get("s3"));
            
            service.setDatasources(existingDataSources);
        }
    }

    private void updateEndpoints(APIService service, List<UpdateApiServiceCommand.EndpointDTO> endpoints) {
        if (endpoints != null) {
            // Clear existing endpoints
            service.getEndpoints().clear();
            
            // Add new endpoints
            endpoints.forEach(dto -> {
                Endpoint endpoint = new Endpoint();
                endpoint.setService(service);
                endpoint.setMethod(dto.getMethod());
                endpoint.setPath(dto.getPath());
                endpoint.setCurl(dto.getCurl());
                endpoint.setExpectedResponse(dto.getExpectedResponse());
                endpoint.setDescription(dto.getDescription());
                service.getEndpoints().add(endpoint);
            });
        }
    }
    private void updateClientConsumers(APIService service, List<String> clientConsumerNames) {
        // Supprimer les anciens ClientConsumers
        service.getClientConsumers().clear();
        
        // CrÃ©er et ajouter les nouveaux
        clientConsumerNames.forEach(name -> {
            ClientConsumer clientConsumer = new ClientConsumer();
            clientConsumer.setName(name);
            clientConsumer.setService(service);
            service.getClientConsumers().add(clientConsumer);
        });
    }
    private void updateConsumes(APIService service, List<String> consumeNames) {
        service.getConsumes().clear();
        consumeNames.forEach(name -> {
            Consumer consumer = new Consumer();
            consumer.setName(name);
            consumer.setService(service);
            service.getConsumes().add(consumer);
        });
    }
    
    private void updateConsumedBy(APIService service, List<String> consumedByNames) {
        service.getConsumedBy().clear();
        consumedByNames.forEach(name -> {
            ConsumedBy consumedBy = new ConsumedBy();
            consumedBy.setName(name);
            consumedBy.setService(service);
            service.getConsumedBy().add(consumedBy);
        });
    }
}
