@Data
@Builder
public class UpdateAPIServiceResponse {
    private UUID id;
    private String name;
    private String trigramme;
    private String description;
    private boolean bridgeCommunication;
    private String criticality;
    private String p0Coevey;
    private String techlead;
    private boolean java17Migrated;
    private boolean sonarized;
    private String sonarReportUrl;
    private String version;
    private boolean jfrogMigrated;
    private String githubUrl;
    private String developmentStatus;
    private String springVersion;
    private Integer servicesCountByTrigramme;
    private String bridgeName;
    private String documentedBy;
    private boolean isDocumented;
    private boolean publishedOnSkies;
    private boolean deployedOnDev;
    private boolean migrationTestedOnDev;

    private DataSourcesDTO dataSources;

    private List<String> clientConsumers;
    private List<String> consumes;
    private List<String> consumedBy;
    private List<EndpointDTO> endpoints;

    @Data
    @Builder
    public static class DataSourcesDTO {
        private Boolean rabbitMQ;
        private Boolean commonDB;
        private Boolean dedicatedDB;
        private Boolean s3;
    }

    @Data
    @Builder
    public static class EndpointDTO {
        private String method;
        private String path;
        private String curl;
        private String expectedResponse;
        private String description;
    }
}









private UpdateAPIServiceResponse mapToResponse(APIService service) {
    return UpdateAPIServiceResponse.builder()
        .id(service.getId())
        .name(service.getName())
        .trigramme(service.getTrigramme())
        .description(service.getDescription())
        .bridgeCommunication(service.isBridgeCommunication())
        .criticality(service.getCriticality())
        .p0Coevey(service.getP0Coevey())
        .techlead(service.getTechlead())
        .java17Migrated(service.isJava17Migrated())
        .sonarized(service.isSonarized())
        .sonarReportUrl(service.getSonarReportUrl())
        .version(service.getVersion())
        .jfrogMigrated(service.isJfrogMigrated())
        .githubUrl(service.getGithubUrl())
        .developmentStatus(service.getDevelopmentStatus())
        .springVersion(service.getSpringVersion())
        .servicesCountByTrigramme(service.getServicesCountByTrigramme())
        .bridgeName(service.getBridgeName())
        .documentedBy(service.getDocumentedBy())
        .isDocumented(service.isDocumented())
        .publishedOnSkies(service.isPublishedOnSkies())
        .deployedOnDev(service.isDeployedOnDev())
        .migrationTestedOnDev(service.isMigrationTestedOnDev())

        .dataSources(service.getDatasources() != null
            ? UpdateAPIServiceResponse.DataSourcesDTO.builder()
                .rabbitMQ(service.getDatasources().getRabbitMQ())
                .commonDB(service.getDatasources().getCommonDB())
                .dedicatedDB(service.getDatasources().getDedicatedDB())
                .s3(service.getDatasources().getS3())
                .build()
            : null)


        .clientConsumers(service.getClientConsumers().stream()
            .map(ClientConsumer::getName)
            .toList())

        .consumes(service.getConsumes().stream()
            .map(Consumer::getName)
            .toList())

        .consumedBy(service.getConsumedBy().stream()
            .map(ConsumedBy::getConsumerName)
            .toList())

        .endpoints(service.getEndpoints().stream()
            .map(endpoint -> UpdateAPIServiceResponse.EndpointDTO.builder()
                .method(endpoint.getMethod())
                .path(endpoint.getPath())
                .curl(endpoint.getCurl())
                .expectedResponse(endpoint.getExpectedResponse())
                .description(endpoint.getDescription())
                .build())
            .toList())

        .build();
}

